
#!/bin/bash

# Nome do arquivo zip
ZIP_NAME="iaprender-sistema-completo-$(date +%Y%m%d_%H%M%S).zip"

echo "üöÄ Criando arquivo zip do sistema completo..."
echo "üì¶ Nome do arquivo: $ZIP_NAME"

# Criar diret√≥rio tempor√°rio para preparar os arquivos
TEMP_DIR="/tmp/iaprender-backup"
rm -rf $TEMP_DIR
mkdir -p $TEMP_DIR

# Copiar arquivos do projeto, excluindo diret√≥rios desnecess√°rios
echo "üìÇ Copiando arquivos do sistema..."

# Lista de arquivos/diret√≥rios para excluir
EXCLUDE_PATTERNS=(
    "node_modules"
    ".git"
    "coverage"
    "dist"
    "build"
    ".next"
    ".nuxt"
    ".svelte-kit"
    ".cache"
    ".parcel-cache"
    "*.log"
    "*.tmp"
    ".DS_Store"
    "Thumbs.db"
    ".env.local"
    ".env.development"
    ".env.production"
    "uploads/*"
    ".config/npm"
    ".config/pulse"
    "generated-logos/*"
    "attached_assets/*.txt"
    "*.zip"
    "*.tar.gz"
)

# Construir comando rsync com exclus√µes
EXCLUDE_ARGS=""
for pattern in "${EXCLUDE_PATTERNS[@]}"; do
    EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude=$pattern"
done

# Copiar arquivos
rsync -av $EXCLUDE_ARGS . $TEMP_DIR/iaprender-sistema/

# Criar arquivo README para o zip
cat > $TEMP_DIR/iaprender-sistema/README_SISTEMA.md << 'EOF'
# IAprender - Sistema Educacional Completo

## üìã Descri√ß√£o
Sistema educacional completo com integra√ß√£o AWS Cognito, Bedrock, S3, Aurora Serverless e LiteLLM.

## üöÄ Como executar

### 1. Instalar depend√™ncias
```bash
npm install
```

### 2. Configurar vari√°veis de ambiente
Copie o arquivo `.env.example` para `.env` e configure:
- AWS_ACCESS_KEY_ID
- AWS_SECRET_ACCESS_KEY
- AWS_REGION
- COGNITO_USER_POOL_ID
- COGNITO_CLIENT_ID
- DATABASE_URL (Aurora Serverless)

### 3. Executar o sistema
```bash
npm run dev
```

## üìÅ Estrutura do Projeto

### Backend (server/)
- `server/index.ts` - Servidor principal Express
- `server/routes/` - Rotas da API
- `server/services/` - Servi√ßos AWS e integra√ß√£o
- `server/middleware/` - Middlewares de autentica√ß√£o

### Frontend (client/)
- `client/src/pages/` - P√°ginas da aplica√ß√£o
- `client/src/components/` - Componentes React reutiliz√°veis
- `client/src/hooks/` - Hooks customizados

### Banco de Dados (src/models/)
- Modelos PostgreSQL com Aurora Serverless
- Sistema hier√°rquico: Admin > Gestor > Diretor > Professor > Aluno

## üîß Principais Funcionalidades

### Administra√ß√£o
- Dashboard administrativo completo
- Gest√£o de usu√°rios via AWS Cognito
- Monitoramento de custos AWS
- Gest√£o de contratos e empresas

### Educacional
- Sistema de planejamento de aulas
- Gerador de atividades com IA
- Chat educacional com multiple LLMs
- Sistema de notifica√ß√µes

### Seguran√ßa
- Autentica√ß√£o JWT com Cognito
- Sistema de permiss√µes hier√°rquico
- Monitoramento de tokens
- Rate limiting por usu√°rio

## üèóÔ∏è Tecnologias Utilizadas
- **Frontend**: React, TypeScript, Tailwind CSS, Vite
- **Backend**: Node.js, Express, TypeScript
- **Banco**: PostgreSQL (Aurora Serverless)
- **AWS**: Cognito, Bedrock, S3, Lambda
- **IA**: OpenAI, Anthropic, Perplexity via LiteLLM

## üìû Suporte
Sistema desenvolvido para plataforma educacional brasileira com foco em BNCC.
EOF

# Criar informa√ß√µes do sistema
cat > $TEMP_DIR/iaprender-sistema/INFORMACOES_SISTEMA.txt << EOF
========================================
IAPRENDER - SISTEMA EDUCACIONAL COMPLETO
========================================

Data de cria√ß√£o do backup: $(date)
Vers√£o do Node.js: $(node --version 2>/dev/null || echo "N√£o detectado")
Sistema Operacional: $(uname -s)

COMPONENTES PRINCIPAIS:
- Frontend React + TypeScript
- Backend Express + TypeScript  
- Banco PostgreSQL Aurora Serverless
- Integra√ß√£o AWS Cognito
- Sistema de IA com LiteLLM
- Dashboard administrativo
- Sistema hier√°rquico de permiss√µes

ARQUIVOS IMPORTANTES:
- server/index.ts - Servidor principal
- client/src/App.tsx - Aplica√ß√£o principal
- server/db.ts - Configura√ß√£o do banco
- server/routes/ - APIs do sistema

CONFIGURA√á√ïES NECESS√ÅRIAS:
1. AWS Credentials
2. Cognito User Pool
3. Aurora Database
4. S3 Bucket
5. Bedrock Access

Para mais detalhes, consulte README_SISTEMA.md
EOF

# Criar o arquivo zip
cd $TEMP_DIR
echo "üóúÔ∏è Compactando arquivos..."
zip -r "/home/runner/workspace/$ZIP_NAME" iaprender-sistema/ -q

# Mover para diret√≥rio do projeto
mv "/home/runner/workspace/$ZIP_NAME" "/home/runner/workspace/"

# Limpar arquivos tempor√°rios
rm -rf $TEMP_DIR

echo "‚úÖ Sistema empacotado com sucesso!"
echo "üìç Arquivo criado: $ZIP_NAME"
echo "üìä Tamanho do arquivo:"
ls -lh "/home/runner/workspace/$ZIP_NAME" | awk '{print $5}'

echo ""
echo "üéØ O arquivo zip cont√©m:"
echo "   ‚Ä¢ Todo o c√≥digo fonte (frontend + backend)"
echo "   ‚Ä¢ Configura√ß√µes e scripts"
echo "   ‚Ä¢ Documenta√ß√£o completa"
echo "   ‚Ä¢ Estrutura de banco de dados"
echo "   ‚Ä¢ Guias de instala√ß√£o"

echo ""
echo "‚ö†Ô∏è  IMPORTANTE: Configure as vari√°veis de ambiente antes de executar!"
