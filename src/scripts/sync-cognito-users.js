import CognitoService from '../config/cognito.js';
import Usuario from '../models/Usuario.js';
import logger from '../utils/logger.js';

/**
 * Script para sincronizar usu√°rios do AWS Cognito com base local
 * ETAPA 2: Integra√ß√£o com dados reais do Cognito
 */
async function sincronizarUsuariosCognito() {
  logger.info('üîÑ Iniciando sincroniza√ß√£o de usu√°rios do AWS Cognito...');
  
  const cognitoService = new CognitoService();
  // Usar m√©todos est√°ticos da classe Usuario

  try {
    // Verificar conectividade com Cognito
    const conectado = await cognitoService.verificarConectividade();
    if (!conectado) {
      throw new Error('Falha na conectividade com AWS Cognito');
    }

    // Obter usu√°rios do Cognito
    logger.info('üìã Buscando usu√°rios do AWS Cognito...');
    const resultado = await cognitoService.listarUsuarios();
    
    if (resultado.usuarios.length === 0) {
      logger.warn('‚ö†Ô∏è Nenhum usu√°rio encontrado no Cognito');
      return;
    }

    logger.info(`üìä ${resultado.usuarios.length} usu√°rios encontrados no Cognito`);

    // Limpar usu√°rios existentes (exceto admin sistema)
    logger.info('üóëÔ∏è Limpando usu√°rios existentes...');
    const { pool } = await import('../config/database.js');
    const client = await pool.connect();
    try {
      await client.query(`
        DELETE FROM usuarios 
        WHERE email != 'admin.sistema@iaprender.com.br'
      `);
    } finally {
      client.release();
    }

    // Processar cada usu√°rio do Cognito
    let sucessos = 0;
    let falhas = 0;

    for (const cognitoUser of resultado.usuarios) {
      try {
        // Mapear dados do Cognito para formato local
        const dadosUsuario = cognitoService.mapearUsuarioCognito(cognitoUser);
        
        logger.info(`üë§ Processando: ${dadosUsuario.email} (${dadosUsuario.tipo_usuario})`);

        // Criar usu√°rio na base local
        const usuarioLocal = await Usuario.create(dadosUsuario);
        
        logger.info(`‚úÖ Usu√°rio sincronizado: ID ${usuarioLocal.id} - ${usuarioLocal.nome}`);
        sucessos++;

      } catch (error) {
        logger.error(`‚ùå Erro ao sincronizar usu√°rio ${cognitoUser.Username}:`, error.message);
        falhas++;
      }
    }

    // Relat√≥rio final
    logger.info('üìà RELAT√ìRIO DE SINCRONIZA√á√ÉO:');
    logger.info(`‚úÖ Sucessos: ${sucessos}`);
    logger.info(`‚ùå Falhas: ${falhas}`);
    logger.info(`üìä Total processado: ${sucessos + falhas}`);

    // Mostrar estat√≠sticas por tipo de usu√°rio
    const estatisticas = await Usuario.countByTipo();
    logger.info('üìä ESTAT√çSTICAS POR TIPO:');
    logger.info(`üëë Admins: ${estatisticas.admin || 0}`);
    logger.info(`üè¢ Gestores: ${estatisticas.gestor || 0}`);
    logger.info(`üè´ Diretores: ${estatisticas.diretor || 0}`);
    logger.info(`üë©‚Äçüè´ Professores: ${estatisticas.professor || 0}`);
    logger.info(`üéì Alunos: ${estatisticas.aluno || 0}`);

    return {
      sucessos,
      falhas,
      total: sucessos + falhas,
      estatisticas
    };

  } catch (error) {
    logger.error('‚ùå Erro na sincroniza√ß√£o:', error.message);
    throw error;
  }
}

/**
 * Verificar grupos e n√≠veis hier√°rquicos
 */
async function verificarNiveisHierarquicos() {
  logger.info('üîç Verificando n√≠veis hier√°rquicos...');
  
  try {
    // Consultar usu√°rios por empresa e tipo
    const { pool } = await import('../config/database.js');
    const client = await pool.connect();
    
    const query = `
      SELECT 
        e.nome as empresa_nome,
        u.tipo_usuario,
        COUNT(*) as total,
        STRING_AGG(u.nome, ', ') as usuarios
      FROM usuarios u
      LEFT JOIN empresas e ON u.empresa_id = e.id
      WHERE u.email != 'admin.sistema@iaprender.com.br'
      GROUP BY e.nome, u.tipo_usuario
      ORDER BY e.nome, 
        CASE u.tipo_usuario 
          WHEN 'admin' THEN 1
          WHEN 'gestor' THEN 2  
          WHEN 'diretor' THEN 3
          WHEN 'professor' THEN 4
          WHEN 'aluno' THEN 5
        END
    `;

    const result = await client.query(query);
    client.release();
    
    logger.info('üèóÔ∏è ESTRUTURA HIER√ÅRQUICA POR EMPRESA:');
    logger.info('='.repeat(80));
    
    for (const row of result.rows) {
      const empresa = row.empresa_nome || 'SEM EMPRESA';
      logger.info(`üè¢ ${empresa}`);
      logger.info(`  ‚îî‚îÄ‚îÄ ${row.tipo_usuario.toUpperCase()}: ${row.total} usu√°rio(s)`);
      logger.info(`      ‚îî‚îÄ‚îÄ ${row.usuarios}`);
      logger.info('');
    }

    return result.rows;

  } catch (error) {
    logger.error('‚ùå Erro ao verificar n√≠veis hier√°rquicos:', error.message);
    throw error;
  }
}

// Executar script se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  try {
    await sincronizarUsuariosCognito();
    await verificarNiveisHierarquicos();
    logger.info('üéâ Sincroniza√ß√£o conclu√≠da com sucesso!');
    process.exit(0);
  } catch (error) {
    logger.error('üí• Falha na execu√ß√£o:', error.message);
    process.exit(1);
  }
}

export { sincronizarUsuariosCognito, verificarNiveisHierarquicos };