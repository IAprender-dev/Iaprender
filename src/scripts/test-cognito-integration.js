#!/usr/bin/env node

/**
 * Script para testar integra√ß√£o com AWS Cognito
 * Verifica se conseguimos acessar usu√°rios e grupos reais
 */

import CognitoService from '../config/cognito.js';
import logger from '../utils/logger.js';

async function testarIntegracaoCognito() {
  console.log('üöÄ Iniciando teste de integra√ß√£o AWS Cognito\n');
  
  const cognitoService = new CognitoService();
  
  try {
    // 1. Verificar conectividade
    console.log('1Ô∏è‚É£ Verificando conectividade...');
    const conectado = await cognitoService.verificarConectividade();
    
    if (!conectado) {
      console.log('‚ùå Falha na conectividade com AWS Cognito');
      console.log('   Verifique as credenciais AWS no arquivo .env');
      return;
    }
    console.log('‚úÖ Conectividade confirmada\n');
    
    // 2. Listar grupos dispon√≠veis
    console.log('2Ô∏è‚É£ Listando grupos dispon√≠veis...');
    const grupos = await cognitoService.listarGrupos();
    
    if (grupos.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum grupo encontrado no User Pool');
    } else {
      console.log(`‚úÖ ${grupos.length} grupos encontrados:`);
      grupos.forEach(grupo => {
        console.log(`   üìã ${grupo.GroupName} (preced√™ncia: ${grupo.Precedence || 0})`);
        if (grupo.Description) {
          console.log(`      üìù ${grupo.Description}`);
        }
      });
    }
    console.log('');
    
    // 3. Listar usu√°rios com grupos
    console.log('3Ô∏è‚É£ Listando usu√°rios com grupos...');
    const resultado = await cognitoService.listarUsuarios(10); // Limitar a 10 para teste
    
    if (resultado.usuarios.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum usu√°rio encontrado no User Pool');
    } else {
      console.log(`‚úÖ ${resultado.usuarios.length} usu√°rios encontrados:\n`);
      
      resultado.usuarios.forEach((user, index) => {
        const emailAttr = user.Attributes?.find(attr => attr.Name === 'email');
        const email = emailAttr?.Value || 'N/A';
        
        console.log(`   ${index + 1}. üë§ ${user.Username}`);
        console.log(`      üìß Email: ${email}`);
        console.log(`      üìä Status: ${user.UserStatus}`);
        console.log(`      üìÖ Criado: ${new Date(user.UserCreateDate).toLocaleDateString('pt-BR')}`);
        
        if (user.Groups && user.Groups.length > 0) {
          console.log(`      üë• Grupos: ${user.Groups.map(g => g.GroupName).join(', ')}`);
        } else {
          console.log(`      üë• Grupos: Nenhum grupo atribu√≠do`);
        }
        
        // Mapear para tipo de usu√°rio local
        const dadosMapeados = cognitoService.mapearUsuarioCognito(user);
        console.log(`      üè∑Ô∏è  Tipo Local: ${dadosMapeados.tipo_usuario.toUpperCase()}`);
        console.log(`      üè¢ Empresa ID: ${dadosMapeados.empresa_id || 'N/A'}`);
        console.log('');
      });
    }
    
    // 4. Resumo do mapeamento de grupos
    console.log('4Ô∏è‚É£ Mapeamento de grupos configurado:');
    Object.entries(cognitoService.groupMappings).forEach(([grupo, tipo]) => {
      console.log(`   ${grupo} ‚Üí ${tipo.toUpperCase()}`);
    });
    console.log('');
    
    // 5. Estat√≠sticas finais
    console.log('üìä RESUMO DA INTEGRA√á√ÉO:');
    console.log(`   ‚Ä¢ User Pool ID: ${cognitoService.userPoolId}`);
    console.log(`   ‚Ä¢ Total de grupos: ${grupos.length}`);
    console.log(`   ‚Ä¢ Total de usu√°rios: ${resultado.usuarios.length}`);
    console.log(`   ‚Ä¢ Conectividade: ${conectado ? 'OK' : 'FALHA'}`);
    console.log(`   ‚Ä¢ Timestamp: ${new Date().toLocaleString('pt-BR')}`);
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    console.error('   Detalhes:', error);
  }
}

// Executar teste se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testarIntegracaoCognito()
    .then(() => {
      console.log('\n‚úÖ Teste conclu√≠do');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Erro fatal:', error.message);
      process.exit(1);
    });
}

export default testarIntegracaoCognito;