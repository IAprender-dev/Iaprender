import { Usuario } from '../models/Usuario.js';
import { autenticar } from '../middleware/auth.js';
import { 
  verificarTipoUsuario, 
  verificarProprioUsuario, 
  verificarAcessoUsuario,
  verificarEmpresa,
  apenasAdmin,
  adminOuGestor,
  qualquerTipo
} from '../middleware/autorizar.js';

/**
 * Controller de Usu√°rios
 * Gerencia todas as opera√ß√µes relacionadas aos usu√°rios do sistema
 * Integra modelo Usuario com middlewares de autentica√ß√£o e autoriza√ß√£o
 */
export class UsuarioController {

  // ============================================================================
  // M√âTODOS AUXILIARES E FORMATA√á√ÉO DE RESPOSTA
  // ============================================================================

  /**
   * Formato padr√£o de resposta da API
   * @param {Object} res - Objeto response do Express
   * @param {number} statusCode - C√≥digo de status HTTP
   * @param {Object} data - Dados da resposta
   * @param {string} message - Mensagem da resposta
   */
  static sendResponse(res, statusCode, data, message = null) {
    const response = {
      success: statusCode < 400,
      timestamp: new Date().toISOString(),
      ...(message && { message }),
      ...(data && { data })
    };
    
    res.status(statusCode).json(response);
  }

  /**
   * Trata erros do controller de forma padronizada
   * @param {Object} res - Objeto response do Express
   * @param {Error} error - Erro a ser tratado
   * @param {string} context - Contexto onde ocorreu o erro
   */
  static handleError(res, error, context = '') {
    console.error(`‚ùå Erro no UsuarioController ${context}:`, error);
    
    // Erros espec√≠ficos do modelo Usuario
    if (error.code === 'VALIDATION_ERROR') {
      return this.sendResponse(res, 400, null, `Dados inv√°lidos: ${error.errors?.join(', ') || error.message}`);
    }

    if (error.code === 'USER_NOT_FOUND') {
      return this.sendResponse(res, 404, null, 'Usu√°rio n√£o encontrado');
    }

    if (error.code === 'EMAIL_ALREADY_EXISTS') {
      return this.sendResponse(res, 409, null, 'Email j√° est√° em uso');
    }

    if (error.code === 'COGNITO_SUB_ALREADY_EXISTS') {
      return this.sendResponse(res, 409, null, 'Usu√°rio Cognito j√° est√° cadastrado');
    }

    // Erros de autoriza√ß√£o
    if (error.code === 'USER_NOT_AUTHENTICATED') {
      return this.sendResponse(res, 401, null, 'Usu√°rio n√£o autenticado');
    }

    if (error.code === 'INSUFFICIENT_USER_TYPE') {
      return this.sendResponse(res, 403, null, 'Permiss√£o insuficiente para esta opera√ß√£o');
    }

    if (error.code === 'COMPANY_ACCESS_DENIED') {
      return this.sendResponse(res, 403, null, 'Acesso negado aos dados desta empresa');
    }

    // Erros de banco de dados PostgreSQL
    if (error.code === '23505') { // Viola√ß√£o de unicidade
      return this.sendResponse(res, 409, null, 'Registro j√° existe (dados duplicados)');
    }
    
    if (error.code === '23503') { // Viola√ß√£o de chave estrangeira
      return this.sendResponse(res, 400, null, 'Refer√™ncia inv√°lida (empresa/contrato n√£o existe)');
    }
    
    // Erro gen√©rico
    const message = process.env.NODE_ENV === 'development' 
      ? error.message 
      : 'Erro interno do servidor';
      
    this.sendResponse(res, 500, null, message);
  }

  /**
   * Valida campos obrigat√≥rios
   * @param {Object} data - Dados a serem validados
   * @param {Array} requiredFields - Lista de campos obrigat√≥rios
   */
  static validateRequiredFields(data, requiredFields) {
    const missing = requiredFields.filter(field => !data[field]);
    if (missing.length > 0) {
      const error = new Error(`Campos obrigat√≥rios faltando: ${missing.join(', ')}`);
      error.code = 'VALIDATION_ERROR';
      error.errors = missing.map(field => `${field} √© obrigat√≥rio`);
      throw error;
    }
  }

  // ============================================================================
  // ENDPOINTS PRINCIPAIS DO CRUD
  // ============================================================================

  /**
   * GET /api/usuarios/:id - Busca usu√°rio por ID
   * Middlewares: autenticar, verificarAcessoUsuario
   */
  static async buscarPorId(req, res) {
    try {
      console.log('üîç UsuarioController.buscarPorId - ID:', req.params.id);

      const { id } = req.params;
      
      if (!id || isNaN(parseInt(id))) {
        return this.sendResponse(res, 400, null, 'ID do usu√°rio inv√°lido');
      }

      const usuario = await Usuario.findById(parseInt(id));
      
      if (!usuario) {
        return this.sendResponse(res, 404, null, 'Usu√°rio n√£o encontrado');
      }

      // Retornar dados limpos via toJSON()
      this.sendResponse(res, 200, usuario.toJSON(), 'Usu√°rio encontrado com sucesso');

    } catch (error) {
      this.handleError(res, error, 'buscarPorId');
    }
  }

  /**
   * GET /api/usuarios/email/:email - Busca usu√°rio por email
   * Middlewares: autenticar, adminOuGestor
   */
  static async buscarPorEmail(req, res) {
    try {
      console.log('üîç UsuarioController.buscarPorEmail - Email:', req.params.email);

      const { email } = req.params;
      
      if (!email || !email.includes('@')) {
        return this.sendResponse(res, 400, null, 'Email inv√°lido');
      }

      const usuario = await Usuario.findByEmail(email);
      
      if (!usuario) {
        return this.sendResponse(res, 404, null, 'Usu√°rio n√£o encontrado');
      }

      this.sendResponse(res, 200, usuario.toJSON(), 'Usu√°rio encontrado com sucesso');

    } catch (error) {
      this.handleError(res, error, 'buscarPorEmail');
    }
  }

  /**
   * GET /api/usuarios/cognito/:sub - Busca usu√°rio por Cognito Sub
   * Middlewares: autenticar, adminOuGestor
   */
  static async buscarPorCognitoSub(req, res) {
    try {
      console.log('üîç UsuarioController.buscarPorCognitoSub - Sub:', req.params.sub);

      const { sub } = req.params;
      
      if (!sub) {
        return this.sendResponse(res, 400, null, 'Cognito Sub inv√°lido');
      }

      const usuario = await Usuario.findByCognitoSub(sub);
      
      if (!usuario) {
        return this.sendResponse(res, 404, null, 'Usu√°rio n√£o encontrado');
      }

      this.sendResponse(res, 200, usuario.toJSON(), 'Usu√°rio encontrado com sucesso');

    } catch (error) {
      this.handleError(res, error, 'buscarPorCognitoSub');
    }
  }

  /**
   * GET /api/usuarios - Lista usu√°rios com filtros e pagina√ß√£o
   * Middlewares: autenticar, adminOuGestor, verificarEmpresa (opcional)
   */
  static async listarUsuarios(req, res) {
    try {
      console.log('üìã UsuarioController.listarUsuarios - Query:', req.query);

      const {
        page = 1,
        limit = 10,
        tipo_usuario,
        empresa_id,
        status = 'ativo',
        search,
        orderBy = 'nome',
        orderDirection = 'ASC'
      } = req.query;

      // Filtros baseados no usu√°rio logado
      const filters = { status };
      
      // Se n√£o for admin, filtrar por empresa do usu√°rio
      if (req.user.tipo_usuario !== 'admin' && req.user.empresa_id) {
        filters.empresa_id = req.user.empresa_id;
      } else if (empresa_id) {
        filters.empresa_id = parseInt(empresa_id);
      }

      if (tipo_usuario) {
        filters.tipo_usuario = tipo_usuario;
      }

      if (search) {
        filters.search = search;
      }

      const options = {
        page: parseInt(page),
        limit: Math.min(parseInt(limit), 100), // M√°ximo 100 por p√°gina
        orderBy,
        orderDirection: orderDirection.toUpperCase()
      };

      const resultado = await Usuario.findAll(filters, options);

      this.sendResponse(res, 200, {
        usuarios: resultado.usuarios.map(u => u.toJSON()),
        pagination: {
          page: options.page,
          limit: options.limit,
          total: resultado.total,
          pages: Math.ceil(resultado.total / options.limit)
        }
      }, 'Usu√°rios listados com sucesso');

    } catch (error) {
      this.handleError(res, error, 'listarUsuarios');
    }
  }

  /**
   * POST /api/usuarios - Cria novo usu√°rio
   * Middlewares: autenticar, adminOuGestor
   */
  static async criarUsuario(req, res) {
    try {
      console.log('üìù UsuarioController.criarUsuario - Dados:', req.body);

      // Validar campos obrigat√≥rios
      this.validateRequiredFields(req.body, [
        'cognito_sub', 'email', 'nome', 'tipo_usuario'
      ]);

      const dadosUsuario = {
        ...req.body,
        // Se n√£o for admin, for√ßar empresa do usu√°rio logado
        empresa_id: req.user.tipo_usuario === 'admin' 
          ? req.body.empresa_id 
          : req.user.empresa_id
      };

      const usuario = await Usuario.criar(dadosUsuario);

      this.sendResponse(res, 201, usuario.toJSON(), 'Usu√°rio criado com sucesso');

    } catch (error) {
      this.handleError(res, error, 'criarUsuario');
    }
  }

  /**
   * PATCH /api/usuarios/:id - Atualiza usu√°rio
   * Middlewares: autenticar, verificarAcessoUsuario
   */
  static async atualizarUsuario(req, res) {
    try {
      console.log('üìù UsuarioController.atualizarUsuario - ID:', req.params.id, 'Dados:', req.body);

      const { id } = req.params;
      
      if (!id || isNaN(parseInt(id))) {
        return this.sendResponse(res, 400, null, 'ID do usu√°rio inv√°lido');
      }

      // Campos que n√£o podem ser alterados
      const camposProtegidos = ['id', 'cognito_sub', 'criado_em', 'atualizado_em'];
      const dadosLimpos = { ...req.body };
      
      camposProtegidos.forEach(campo => delete dadosLimpos[campo]);

      // Se n√£o for admin, n√£o pode alterar empresa_id ou tipo_usuario
      if (req.user.tipo_usuario !== 'admin') {
        delete dadosLimpos.empresa_id;
        delete dadosLimpos.tipo_usuario;
        delete dadosLimpos.status;
      }

      const usuario = await Usuario.atualizar(parseInt(id), dadosLimpos);

      this.sendResponse(res, 200, usuario.toJSON(), 'Usu√°rio atualizado com sucesso');

    } catch (error) {
      this.handleError(res, error, 'atualizarUsuario');
    }
  }

  /**
   * DELETE /api/usuarios/:id - Remove usu√°rio
   * Middlewares: autenticar, apenasAdmin
   */
  static async removerUsuario(req, res) {
    try {
      console.log('üóëÔ∏è UsuarioController.removerUsuario - ID:', req.params.id);

      const { id } = req.params;
      
      if (!id || isNaN(parseInt(id))) {
        return this.sendResponse(res, 400, null, 'ID do usu√°rio inv√°lido');
      }

      const sucesso = await Usuario.deletar(parseInt(id));

      if (sucesso) {
        this.sendResponse(res, 200, null, 'Usu√°rio removido com sucesso');
      } else {
        this.sendResponse(res, 404, null, 'Usu√°rio n√£o encontrado para remo√ß√£o');
      }

    } catch (error) {
      this.handleError(res, error, 'removerUsuario');
    }
  }

  // ============================================================================
  // ENDPOINTS ESPEC√çFICOS E UTILIT√ÅRIOS
  // ============================================================================

  /**
   * GET /api/usuarios/me - Perfil do usu√°rio logado
   * Middlewares: autenticar
   */
  static async meuPerfil(req, res) {
    try {
      console.log('üë§ UsuarioController.meuPerfil - User:', req.user.id);

      const usuario = await Usuario.findById(req.user.id);
      
      if (!usuario) {
        return this.sendResponse(res, 404, null, 'Perfil do usu√°rio n√£o encontrado');
      }

      this.sendResponse(res, 200, usuario.toJSON(), 'Perfil obtido com sucesso');

    } catch (error) {
      this.handleError(res, error, 'meuPerfil');
    }
  }

  /**
   * PATCH /api/usuarios/me - Atualiza perfil do usu√°rio logado
   * Middlewares: autenticar
   */
  static async atualizarMeuPerfil(req, res) {
    try {
      console.log('üìù UsuarioController.atualizarMeuPerfil - User:', req.user.id, 'Dados:', req.body);

      // Campos que o usu√°rio pode alterar no pr√≥prio perfil
      const camposPermitidos = [
        'nome', 'telefone', 'endereco', 'cidade', 'estado', 
        'data_nascimento', 'configuracoes'
      ];
      
      const dadosLimpos = {};
      camposPermitidos.forEach(campo => {
        if (req.body[campo] !== undefined) {
          dadosLimpos[campo] = req.body[campo];
        }
      });

      if (Object.keys(dadosLimpos).length === 0) {
        return this.sendResponse(res, 400, null, 'Nenhum campo v√°lido fornecido para atualiza√ß√£o');
      }

      const usuario = await Usuario.atualizar(req.user.id, dadosLimpos);

      this.sendResponse(res, 200, usuario.toJSON(), 'Perfil atualizado com sucesso');

    } catch (error) {
      this.handleError(res, error, 'atualizarMeuPerfil');
    }
  }

  /**
   * POST /api/usuarios/:id/ultimo-login - Atualiza √∫ltimo login
   * Middlewares: autenticar, verificarProprioUsuario
   */
  static async atualizarUltimoLogin(req, res) {
    try {
      console.log('üïí UsuarioController.atualizarUltimoLogin - ID:', req.params.id);

      const { id } = req.params;
      
      if (!id || isNaN(parseInt(id))) {
        return this.sendResponse(res, 400, null, 'ID do usu√°rio inv√°lido');
      }

      const usuario = await Usuario.findById(parseInt(id));
      if (!usuario) {
        return this.sendResponse(res, 404, null, 'Usu√°rio n√£o encontrado');
      }

      await usuario.updateLastLogin();

      this.sendResponse(res, 200, null, '√öltimo login atualizado com sucesso');

    } catch (error) {
      this.handleError(res, error, 'atualizarUltimoLogin');
    }
  }

  /**
   * GET /api/usuarios/empresa/:empresaId - Lista usu√°rios por empresa
   * Middlewares: autenticar, verificarEmpresa
   */
  static async listarPorEmpresa(req, res) {
    try {
      console.log('üè¢ UsuarioController.listarPorEmpresa - Empresa:', req.params.empresaId);

      const { empresaId } = req.params;
      
      if (!empresaId || isNaN(parseInt(empresaId))) {
        return this.sendResponse(res, 400, null, 'ID da empresa inv√°lido');
      }

      const usuarios = await Usuario.findByEmpresa(parseInt(empresaId));

      this.sendResponse(res, 200, {
        usuarios: usuarios.map(u => u.toJSON()),
        total: usuarios.length
      }, 'Usu√°rios da empresa listados com sucesso');

    } catch (error) {
      this.handleError(res, error, 'listarPorEmpresa');
    }
  }

  /**
   * GET /api/usuarios/stats - Estat√≠sticas dos usu√°rios
   * Middlewares: autenticar, adminOuGestor
   */
  static async estatisticas(req, res) {
    try {
      console.log('üìä UsuarioController.estatisticas');

      const stats = await Usuario.getStats();

      this.sendResponse(res, 200, stats, 'Estat√≠sticas obtidas com sucesso');

    } catch (error) {
      this.handleError(res, error, 'estatisticas');
    }
  }

  // ============================================================================
  // M√âTODOS DE SINCRONIZA√á√ÉO COM COGNITO
  // ============================================================================

  /**
   * POST /api/usuarios/sincronizar - Sincroniza usu√°rio com Cognito
   * Middlewares: autenticar, adminOuGestor
   */
  static async sincronizarComCognito(req, res) {
    try {
      console.log('üîÑ UsuarioController.sincronizarComCognito - Dados:', req.body);

      this.validateRequiredFields(req.body, ['cognito_sub', 'email', 'nome']);

      const { sincronizarUsuario } = await import('../middleware/autorizar.js');
      const usuario = await sincronizarUsuario(req.body);

      this.sendResponse(res, 200, usuario.toJSON(), 'Usu√°rio sincronizado com sucesso');

    } catch (error) {
      this.handleError(res, error, 'sincronizarComCognito');
    }
  }
}

export default UsuarioController;