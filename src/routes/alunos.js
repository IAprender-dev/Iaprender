/**
 * ROTAS DE ALUNOS - SISTEMA DE GEST√ÉO EDUCACIONAL IAPRENDER
 * 
 * Este arquivo define todas as rotas relacionadas aos alunos do sistema,
 * implementando controle de acesso hier√°rquico e valida√ß√µes de seguran√ßa.
 * 
 * HIERARQUIA DE ACESSO:
 * - Admin: Acesso total a todos os alunos
 * - Gestor: Gerencia alunos da pr√≥pria empresa
 * - Diretor: Acesso aos alunos da pr√≥pria escola
 * - Professor: Visualiza√ß√£o dos alunos das escolas vinculadas
 * - Aluno: Acesso apenas aos pr√≥prios dados
 */

import { Router } from 'express';
import { AlunoController } from '../controllers/alunoController.js';
import { 
  autenticar,
  verificarTipoUsuario,
  verificarProprioUsuario,
  verificarAcessoUsuario,
  verificarEmpresa,
  adminOuGestor,
  apenasAdmin,
  qualquerTipo
} from '../middleware/autorizar.js';
import rateLimit from 'express-rate-limit';

const router = Router();

// =====================================================================
// CONFIGURA√á√ÉO DE RATE LIMITING POR OPERA√á√ÉO
// =====================================================================

// Rate limit para consultas (mais permissivo)
const consultaLimiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minuto
  max: 60, // 60 requests por minuto
  message: {
    success: false,
    message: 'Muitas consultas. Tente novamente em 1 minuto.',
    limite: '60 requests/min'
  },
  standardHeaders: true,
  legacyHeaders: false
});

// Rate limit para opera√ß√µes de escrita (mais restritivo)
const escritaLimiter = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minuto
  max: 20, // 20 requests por minuto
  message: {
    success: false,
    message: 'Muitas opera√ß√µes de escrita. Tente novamente em 1 minuto.',
    limite: '20 requests/min'
  },
  standardHeaders: true,
  legacyHeaders: false
});

// Rate limit para transfer√™ncias (muito restritivo)
const transferenciaLimiter = rateLimit({
  windowMs: 5 * 60 * 1000, // 5 minutos
  max: 10, // 10 requests por 5 minutos
  message: {
    success: false,
    message: 'Muitas opera√ß√µes de transfer√™ncia. Tente novamente em 5 minutos.',
    limite: '10 requests/5min'
  },
  standardHeaders: true,
  legacyHeaders: false
});

// =====================================================================
// ROTAS DE CONSULTA - Opera√ß√µes de leitura
// =====================================================================

/**
 * GET /api/alunos
 * Listar alunos com filtros e pagina√ß√£o
 * 
 * PERMISS√ïES:
 * - Admin: Todos os alunos do sistema
 * - Gestor: Alunos da pr√≥pria empresa
 * - Diretor: Alunos da pr√≥pria escola
 * - Professor: Alunos das escolas vinculadas
 * - Aluno: Apenas pr√≥prios dados (redirecionado para /me)
 * 
 * RATE LIMIT: 60 requests/min
 */
router.get('/', 
  consultaLimiter,
  autenticar,
  qualquerTipo, // Todos os tipos podem listar (com filtros apropriados)
  AlunoController.listarAlunos
);

/**
 * GET /api/alunos/stats
 * Obter estat√≠sticas de alunos
 * 
 * PERMISS√ïES: Admin, Gestor, Diretor
 * RATE LIMIT: 60 requests/min
 */
router.get('/stats',
  consultaLimiter,
  autenticar,
  verificarTipoUsuario(['admin', 'gestor', 'diretor']),
  AlunoController.obterEstatisticas
);

/**
 * GET /api/alunos/:id
 * Buscar aluno espec√≠fico por ID
 * 
 * PERMISS√ïES: Baseada em hierarquia e acesso ao aluno espec√≠fico
 * RATE LIMIT: 60 requests/min
 */
router.get('/:id',
  consultaLimiter,
  autenticar,
  qualquerTipo, // Valida√ß√£o de acesso feita no controller
  AlunoController.buscarPorId
);

/**
 * GET /api/alunos/:id/completo
 * Obter dados completos do aluno (com escola, respons√°vel, empresa)
 * 
 * PERMISS√ïES: Baseada em hierarquia e acesso ao aluno espec√≠fico
 * RATE LIMIT: 60 requests/min
 */
router.get('/:id/completo',
  consultaLimiter,
  autenticar,
  qualquerTipo, // Valida√ß√£o de acesso feita no controller
  AlunoController.obterAluno
);

/**
 * GET /api/alunos/:id/transferencias
 * Obter hist√≥rico de transfer√™ncias do aluno
 * 
 * PERMISS√ïES: Baseada em hierarquia e acesso ao aluno espec√≠fico
 * RATE LIMIT: 60 requests/min
 */
router.get('/:id/transferencias',
  consultaLimiter,
  autenticar,
  qualquerTipo, // Valida√ß√£o de acesso feita no controller
  AlunoController.obterHistoricoTransferencias
);

// =====================================================================
// ROTAS DE GEST√ÉO - Opera√ß√µes de cria√ß√£o e modifica√ß√£o
// =====================================================================

/**
 * POST /api/alunos
 * Criar novo aluno no sistema
 * 
 * PERMISS√ïES: Admin, Gestor, Diretor
 * VALIDA√á√ïES:
 * - Escola deve pertencer √† empresa do usu√°rio (gestor/diretor)
 * - Admin pode criar em qualquer escola
 * 
 * RATE LIMIT: 20 requests/min
 */
router.post('/',
  escritaLimiter,
  autenticar,
  verificarTipoUsuario(['admin', 'gestor', 'diretor']),
  AlunoController.criarAluno
);

/**
 * PUT /api/alunos/:id
 * Atualizar dados de aluno espec√≠fico
 * 
 * PERMISS√ïES: Baseada em hierarquia e acesso ao aluno
 * CAMPOS PROTEGIDOS: matricula (n√£o pode ser alterada)
 * 
 * RATE LIMIT: 20 requests/min
 */
router.put('/:id',
  escritaLimiter,
  autenticar,
  qualquerTipo, // Valida√ß√£o de acesso feita no controller
  AlunoController.atualizarAluno
);

// =====================================================================
// ROTAS ESPECIALIZADAS - Opera√ß√µes avan√ßadas
// =====================================================================

/**
 * POST /api/alunos/:id/transferir
 * Transferir aluno entre escolas da mesma empresa
 * 
 * PERMISS√ïES: Admin, Gestor, Diretor
 * VALIDA√á√ïES:
 * - Escolas devem pertencer √† mesma empresa
 * - Escola destino deve estar ativa
 * - Nova matr√≠cula gerada automaticamente
 * 
 * RATE LIMIT: 10 requests/5min (muito restritivo)
 */
router.post('/:id/transferir',
  transferenciaLimiter,
  autenticar,
  verificarTipoUsuario(['admin', 'gestor', 'diretor']),
  AlunoController.transferirAluno
);

// =====================================================================
// MIDDLEWARE DE TRATAMENTO DE ERROS ESPEC√çFICO PARA ALUNOS
// =====================================================================

/**
 * Middleware de tratamento de erros para rotas de alunos
 * Captura erros n√£o tratados e formata resposta padronizada
 */
router.use((error, req, res, next) => {
  console.error('‚ùå Erro nas rotas de alunos:', {
    rota: req.path,
    metodo: req.method,
    usuario: req.user?.id || 'n√£o autenticado',
    tipo_usuario: req.user?.tipo_usuario || 'indefinido',
    erro: error.message,
    stack: process.env.NODE_ENV === 'development' ? error.stack : undefined,
    timestamp: new Date().toISOString()
  });

  // Erros de valida√ß√£o (400)
  if (error.name === 'ValidationError' || error.message.includes('validation')) {
    return res.status(400).json({
      success: false,
      message: 'Dados inv√°lidos fornecidos',
      detalhes: error.message,
      rota: req.path,
      timestamp: new Date().toISOString()
    });
  }

  // Erros de acesso (403)
  if (error.message.includes('acesso') || error.message.includes('permiss√£o')) {
    return res.status(403).json({
      success: false,
      message: 'Acesso negado',
      detalhes: error.message,
      rota: req.path,
      timestamp: new Date().toISOString()
    });
  }

  // Erros de n√£o encontrado (404)
  if (error.message.includes('n√£o encontrado') || error.message.includes('not found')) {
    return res.status(404).json({
      success: false,
      message: 'Recurso n√£o encontrado',
      detalhes: error.message,
      rota: req.path,
      timestamp: new Date().toISOString()
    });
  }

  // Erro interno gen√©rico (500)
  res.status(500).json({
    success: false,
    message: 'Erro interno do servidor',
    detalhes: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno',
    rota: req.path,
    timestamp: new Date().toISOString()
  });
});

// =====================================================================
// EXPORTAR ROUTER
// =====================================================================

export default router;

// =====================================================================
// DOCUMENTA√á√ÉO DE USO
// =====================================================================

console.log('üéì ROTAS DE ALUNOS CARREGADAS:');
console.log('üìä CONSULTAS:');
console.log('  ‚Ä¢ GET /api/alunos - Listar com filtros (60/min)');
console.log('  ‚Ä¢ GET /api/alunos/stats - Estat√≠sticas (60/min)');
console.log('  ‚Ä¢ GET /api/alunos/:id - Buscar por ID (60/min)');
console.log('  ‚Ä¢ GET /api/alunos/:id/completo - Dados completos (60/min)');
console.log('  ‚Ä¢ GET /api/alunos/:id/transferencias - Hist√≥rico (60/min)');
console.log('üìù GEST√ÉO:');
console.log('  ‚Ä¢ POST /api/alunos - Criar aluno (20/min)');
console.log('  ‚Ä¢ PUT /api/alunos/:id - Atualizar aluno (20/min)');
console.log('üîÑ ESPECIALIZADA:');
console.log('  ‚Ä¢ POST /api/alunos/:id/transferir - Transferir (10/5min)');
console.log('üîí CONTROLE DE ACESSO: Hier√°rquico por tipo de usu√°rio');
console.log('‚ö° RATE LIMITING: Configurado por tipo de opera√ß√£o');