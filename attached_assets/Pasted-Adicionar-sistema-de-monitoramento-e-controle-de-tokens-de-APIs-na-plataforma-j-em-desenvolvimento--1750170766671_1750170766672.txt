Adicionar sistema de monitoramento e controle de tokens de APIs na plataforma j√° em desenvolvimento, SEM quebrar funcionalidades existentes.
üìã INSTRU√á√ïES PARA IMPLEMENTA√á√ÉO
PASSO 1: An√°lise da Estrutura Atual
bash# Execute primeiro para mapear a arquitetura existente
# Documente os achados antes de come√ßar

1. Identificar estrutura de pastas atual
2. Localizar sistema de autentica√ß√£o/usu√°rios
3. Encontrar onde ficam as chamadas de API
4. Verificar banco de dados usado (JSON, SQLite, MongoDB, etc.)
5. Identificar padr√£o de rotas/endpoints
6. Verificar framework frontend (React, Vue, vanilla JS, etc.)
PASSO 2: Criar Estrutura Modular
// Adicionar estas pastas SEM modificar estrutura existente
/src
  /modules
    /tokenCounter
      /services
        tokenCalculator.js
        tokenLimiter.js
        userTokenService.js
      /middleware
        tokenInterceptor.js
      /routes
        tokenRoutes.js
      /components
        TokenWidget.jsx
        TokenDashboard.jsx
        AdminTokenPanel.jsx
      /utils
        apiDetector.js
        dateHelper.js
      /data
        tokenProviders.json
        userTokenLimits.json (se usando JSON)
PASSO 3: Implementar Interceptor de APIs
javascript// modules/tokenCounter/middleware/tokenInterceptor.js
// ADAPTE PARA SUA ARQUITETURA ATUAL

// Se usando Express.js:
const tokenInterceptor = (req, res, next) => {
  // 1. Pegar usu√°rio do sistema existente
  const userId = req.user?.id || req.session?.userId;
  
  // 2. Detectar se √© chamada para API de IA
  const isAIRequest = detectAIRequest(req);
  
  if (!isAIRequest) return next();
  
  // 3. Verificar limite ANTES de processar
  checkTokenLimit(userId)
    .then(canProceed => {
      if (!canProceed) {
        return res.status(429).json({
          error: 'Limite de tokens excedido',
          resetDate: getNextResetDate(userId)
        });
      }
      
      // 4. Continuar com requisi√ß√£o original
      interceptResponse(res, userId, req);
      next();
    });
};

// Se usando outro framework, adapte o padr√£o
PASSO 4: Servi√ßos de C√°lculo de Tokens
javascript// modules/tokenCounter/services/tokenCalculator.js

const TokenCalculators = {
  openai: {
    'gpt-4': (prompt, completion) => {
      // Implementar c√°lculo espec√≠fico GPT-4
      const promptTokens = Math.ceil(prompt.length / 4);
      const completionTokens = Math.ceil((completion || '').length / 4);
      return { promptTokens, completionTokens, total: promptTokens + completionTokens };
    },
    'gpt-3.5-turbo': (prompt, completion) => {
      // Implementar c√°lculo espec√≠fico GPT-3.5
      const promptTokens = Math.ceil(prompt.length / 4);
      const completionTokens = Math.ceil((completion || '').length / 4);
      return { promptTokens, completionTokens, total: promptTokens + completionTokens };
    }
  },
  anthropic: {
    'claude-3': (prompt, completion) => {
      // Implementar c√°lculo espec√≠fico Claude
      const promptTokens = Math.ceil(prompt.length / 3.5);
      const completionTokens = Math.ceil((completion || '').length / 3.5);
      return { promptTokens, completionTokens, total: promptTokens + completionTokens };
    }
  },
  google: {
    'gemini-pro': (prompt, completion) => {
      // Implementar c√°lculo espec√≠fico Gemini
      const promptTokens = Math.ceil(prompt.length / 4);
      const completionTokens = Math.ceil((completion || '').length / 4);
      return { promptTokens, completionTokens, total: promptTokens + completionTokens };
    }
  }
};

module.exports = TokenCalculators;
PASSO 5: Sistema de Dados (Adapt√°vel)
javascript// modules/tokenCounter/data/userTokenLimits.json
// Se usando JSON (adapte para seu banco atual)
{
  "users": {
    "user123": {
      "monthlyLimit": 100000,
      "currentUsage": 15000,
      "periodStartDate": "2025-01-17",
      "isActive": true
    }
  }
}

// modules/tokenCounter/data/tokenUsage.json
{
  "logs": [
    {
      "id": "log_001",
      "userId": "user123",
      "provider": "openai",
      "model": "gpt-4",
      "tokensUsed": 150,
      "timestamp": "2025-06-17T10:30:00Z",
      "requestId": "req_abc123"
    }
  ]
}

// Se usando banco SQL, criar estas tabelas:
/*
CREATE TABLE user_token_limits (
  user_id VARCHAR PRIMARY KEY,
  monthly_limit INTEGER DEFAULT 10000,
  current_usage INTEGER DEFAULT 0,
  period_start_date DATE,
  is_active BOOLEAN DEFAULT true
);

CREATE TABLE token_usage_logs (
  id VARCHAR PRIMARY KEY,
  user_id VARCHAR,
  provider VARCHAR,
  model VARCHAR,
  tokens_used INTEGER,
  timestamp DATETIME,
  request_metadata JSON
);
*/
PASSO 6: Componentes Frontend
jsx// modules/tokenCounter/components/TokenWidget.jsx
// ADAPTE PARA SEU FRAMEWORK FRONTEND

import React, { useState, useEffect } from 'react';

const TokenWidget = ({ userId }) => {
  const [tokenData, setTokenData] = useState(null);
  
  useEffect(() => {
    // Buscar dados do usu√°rio usando API existente da plataforma
    fetchUserTokenData(userId).then(setTokenData);
  }, [userId]);
  
  if (!tokenData) return <div>Carregando...</div>;
  
  const percentage = (tokenData.currentUsage / tokenData.monthlyLimit) * 100;
  const remainingDays = calculateRemainingDays(tokenData.periodStartDate);
  
  return (
    <div className="token-widget">
      <h3>Uso de Tokens</h3>
      <div className="progress-bar">
        <div 
          className="progress-fill" 
          style={{ width: `${percentage}%` }}
        />
      </div>
      <p>{tokenData.currentUsage.toLocaleString()} / {tokenData.monthlyLimit.toLocaleString()}</p>
      <p>Renova√ß√£o em {remainingDays} dias</p>
    </div>
  );
};

export default TokenWidget;
PASSO 7: Integra√ß√£o com Painel Admin
jsx// modules/tokenCounter/components/AdminTokenPanel.jsx

const AdminTokenPanel = () => {
  const [users, setUsers] = useState([]);
  const [selectedUser, setSelectedUser] = useState(null);
  
  // Buscar usu√°rios do sistema existente
  useEffect(() => {
    fetchUsersWithTokenData().then(setUsers);
  }, []);
  
  const updateUserLimit = async (userId, newLimit) => {
    await updateTokenLimit(userId, newLimit);
    // Atualizar lista
    fetchUsersWithTokenData().then(setUsers);
  };
  
  return (
    <div className="admin-token-panel">
      <h2>Gerenciamento de Tokens</h2>
      
      {/* Estat√≠sticas gerais */}
      <div className="stats-grid">
        <div className="stat-card">
          <h3>Total de Tokens Usados</h3>
          <p>{calculateTotalUsage()}</p>
        </div>
        <div className="stat-card">
          <h3>Usu√°rios Ativos</h3>
          <p>{users.filter(u => u.isActive).length}</p>
        </div>
      </div>
      
      {/* Lista de usu√°rios */}
      <div className="users-table">
        <table>
          <thead>
            <tr>
              <th>Usu√°rio</th>
              <th>Uso Atual</th>
              <th>Limite</th>
              <th>Status</th>
              <th>A√ß√µes</th>
            </tr>
          </thead>
          <tbody>
            {users.map(user => (
              <tr key={user.id}>
                <td>{user.name}</td>
                <td>{user.currentUsage}</td>
                <td>{user.monthlyLimit}</td>
                <td>{user.status}</td>
                <td>
                  <button onClick={() => setSelectedUser(user)}>
                    Editar Limite
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      {/* Modal para editar limite */}
      {selectedUser && (
        <EditLimitModal 
          user={selectedUser}
          onSave={updateUserLimit}
          onClose={() => setSelectedUser(null)}
        />
      )}
    </div>
  );
};
PASSO 8: Sistema de Reset Autom√°tico
javascript// modules/tokenCounter/services/resetService.js

// Fun√ß√£o para executar diariamente (usando cron ou timer)
const resetExpiredPeriods = async () => {
  const users = await getAllUsersWithTokenData();
  
  for (const user of users) {
    const daysSinceStart = daysBetween(user.periodStartDate, new Date());
    
    if (daysSinceStart >= 30) {
      // Reset do usu√°rio
      await resetUserTokenPeriod(user.id);
      console.log(`Reset realizado para usu√°rio ${user.id}`);
    }
  }
};

// Executar a cada 24 horas
setInterval(resetExpiredPeriods, 24 * 60 * 60 * 1000);
üöÄ ROTEIRO DE IMPLEMENTA√á√ÉO
Fase 1 - Base (1-2 dias)

‚úÖ Criar estrutura de pastas modular
‚úÖ Implementar interceptor b√°sico
‚úÖ Criar sistema de dados (JSON ou adaptar banco)
‚úÖ Implementar c√°lculo de tokens para uma API (OpenAI)

Fase 2 - Interface (2-3 dias)

‚úÖ Criar widget de usu√°rio
‚úÖ Integrar widget no dashboard existente
‚úÖ Criar painel administrativo b√°sico
‚úÖ Implementar sistema de limites

Fase 3 - Expans√£o (2-3 dias)

‚úÖ Adicionar suporte para m√∫ltiplas APIs
‚úÖ Implementar sistema de reset autom√°tico
‚úÖ Criar gr√°ficos de uso
‚úÖ Adicionar alertas e notifica√ß√µes

üîß CHECKLIST DE INTEGRA√á√ÉO
Antes de Come√ßar

 Backup completo da plataforma atual
 Documentar estrutura existente
 Identificar pontos de integra√ß√£o
 Definir estrat√©gia de dados

Durante Desenvolvimento

 Testar cada m√≥dulo isoladamente
 Verificar compatibilidade com c√≥digo existente
 Manter funcionalidades originais intactas
 Implementar logs detalhados

Ap√≥s Implementa√ß√£o

 Testes completos da plataforma
 Verificar performance
 Documentar novas funcionalidades
 Treinar usu√°rios administrativos

‚ö†Ô∏è CUIDADOS IMPORTANTES

N√ÉO modifique arquivos existentes diretamente
USE hooks/middlewares para interceptar funcionalidades
TESTE incrementalmente cada funcionalidade
MANTENHA compatibilidade com sistema de usu√°rios atual
IMPLEMENTE gradualmente - comece simples e expanda

üß™ TESTES RECOMENDADOS
javascript// Testes b√°sicos para verificar integra√ß√£o
const tests = [
  'Usu√°rio consegue fazer login normalmente',
  'Funcionalidades existentes ainda funcionam',
  'Contador de tokens registra uso corretamente',
  'Limites s√£o respeitados',
  'Reset autom√°tico funciona',
  'Painel admin √© acess√≠vel',
  'Performance n√£o degradou'
];

üí° DICA: Comece implementando apenas para uma API (ex: OpenAI) e depois expanda. Mantenha sempre uma vers√£o funcional da plataforma durante o desenvolvimento.