### Passo 6.2: Criar `/src/frontend/dashboard.js`
```javascript
class Dashboard {
  constructor() {
    this.init();
  }

  async init() {
    if (!auth.isAuthenticated()) {
      window.location.href = '/login.html';
      return;
    }

    this.loadUserInfo();
    this.loadStats();
    this.loadData();
    this.setupForms();
  }

  loadUserInfo() {
    const userInfo = JSON.parse(localStorage.getItem('user_info') || '{}');
    document.getElementById('user-name').textContent = userInfo.nome || 'Usuário';
  }

  async loadStats() {
    try {
      const response = await fetch('/api/dashboard/stats', {
        headers: auth.getHeaders()
      });
      
      if (response.ok) {
        const stats = await response.json();
        document.getElementById('total-alunos').textContent = stats.alunos || 0;
        document.getElementById('total-professores').textContent = stats.professores || 0;
        document.getElementById('total-escolas').textContent = stats.escolas || 0;
      }
    } catch (error) {
      console.error('Erro ao carregar estatísticas:', error);
    }
  }

  async loadData() {
    try {
      const response = await fetch('/api/dashboard/recents', {
        headers: auth.getHeaders()
      });
      
      if (response.ok) {
        const data = await response.json();
        this.renderTable(data);
      }
    } catch (error) {
      console.error('Erro ao carregar dados:', error);
    }
  }

  renderTable(data) {
    const tableContainer = document.getElementById('data-table');
    
    let html = '<table class="min-w-full divide-y divide-gray-200">';
    html += '<thead><tr><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Nome</th>';
    html += '<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Tipo</th>';
    html += '<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Data</th></tr></thead>';
    html += '<tbody class="divide-y divide-gray-200">';
    
    data.forEach(item => {
      html += `<tr>
        <td class="px-6 py-4 whitespace-nowrap">${item.nome}</td>
        <td class="px-6 py-4 whitespace-nowrap">${item.tipo}</td>
        <td class="px-6 py-4 whitespace-nowrap">${new Date(item.criado_em).toLocaleDateString()}</td>
      </tr>`;
    });
    
    html += '</tbody></table>';
    tableContainer.innerHTML = html;
  }

  setupForms() {
    const formGenerator = new FormGenerator('form-escola-container');
    formGenerator.generate({
      ...formConfigs.escola,
      onSuccess: (response) => {
        this.closeModal('modal-escola');
        this.loadStats();
        this.loadData();
        this.showSuccess('Escola cadastrada com sucesso!');
      }
    });
  }

  showSuccess(message) {
    // Implementar notificação de sucesso
    alert(message);
  }

  closeModal(modalId) {
    document.getElementById(modalId).classList.add('hidden');
  }
}

// Funções globais
function openModal(modalId) {
  document.getElementById(modalId).classList.remove('hidden');
}

function closeModal(modalId) {
  document.getElementById(modalId).classList.add('hidden');
}

// Inicializar dashboard
document.addEventListener('DOMContentLoaded', () => {
  new Dashboard();
});
```

---
