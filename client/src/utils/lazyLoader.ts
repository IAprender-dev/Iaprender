/**
 * SISTEMA DE LAZY LOADING AVAN√áADO - IAPRENDER
 * 
 * Carregamento sob demanda de formul√°rios, componentes e recursos
 */

import { formCache } from './cache';

interface LazyLoadOptions {
  retryAttempts: number;
  retryDelay: number;
  cacheEnabled: boolean;
  preload: boolean;
}

interface LoadedModule<T> {
  module: T;
  timestamp: number;
  size: number;
}

class LazyLoader {
  private loadedModules = new Map<string, LoadedModule<any>>();
  private loadingPromises = new Map<string, Promise<any>>();
  private preloadQueue: string[] = [];
  private isPreloading = false;

  /**
   * Carregar formul√°rio sob demanda
   */
  async loadForm(formType: string, options: Partial<LazyLoadOptions> = {}): Promise<any> {
    const config: LazyLoadOptions = {
      retryAttempts: 3,
      retryDelay: 1000,
      cacheEnabled: true,
      preload: false,
      ...options
    };

    const cacheKey = `lazy_form_${formType}`;

    // Verificar cache primeiro
    if (config.cacheEnabled) {
      const cached = formCache.getFormConfig(formType);
      if (cached) {
        console.log(`üì¶ Formul√°rio ${formType} carregado do cache`);
        return cached;
      }
    }

    // Verificar se j√° est√° sendo carregado
    if (this.loadingPromises.has(cacheKey)) {
      return this.loadingPromises.get(cacheKey);
    }

    // Iniciar carregamento
    const loadPromise = this.loadFormWithRetry(formType, config);
    this.loadingPromises.set(cacheKey, loadPromise);

    try {
      const result = await loadPromise;
      
      // Armazenar em cache
      if (config.cacheEnabled) {
        formCache.setFormConfig(formType, result);
      }

      // Armazenar m√≥dulo carregado
      this.loadedModules.set(cacheKey, {
        module: result,
        timestamp: Date.now(),
        size: JSON.stringify(result).length
      });

      return result;
    } finally {
      this.loadingPromises.delete(cacheKey);
    }
  }

  /**
   * Carregar formul√°rio com retry
   */
  private async loadFormWithRetry(formType: string, config: LazyLoadOptions): Promise<any> {
    let lastError: Error | null = null;

    for (let attempt = 1; attempt <= config.retryAttempts; attempt++) {
      try {
        console.log(`üîÑ Carregando formul√°rio ${formType} (tentativa ${attempt})`);
        return await this.fetchFormConfig(formType);
      } catch (error) {
        lastError = error as Error;
        console.warn(`‚ùå Erro ao carregar ${formType} (tentativa ${attempt}):`, error);
        
        if (attempt < config.retryAttempts) {
          await this.delay(config.retryDelay * attempt);
        }
      }
    }

    throw new Error(`Falha ao carregar formul√°rio ${formType} ap√≥s ${config.retryAttempts} tentativas: ${lastError?.message}`);
  }

  /**
   * Buscar configura√ß√£o do formul√°rio
   */
  private async fetchFormConfig(formType: string): Promise<any> {
    // Simular busca de configura√ß√£o (substituir por chamada real √† API)
    const configs = await this.getFormConfigurations();
    
    const config = configs[formType];
    if (!config) {
      throw new Error(`Configura√ß√£o n√£o encontrada para formul√°rio: ${formType}`);
    }

    return config;
  }

  /**
   * Obter configura√ß√µes de formul√°rios
   */
  private async getFormConfigurations(): Promise<Record<string, any>> {
    // Cache de configura√ß√µes base
    const cached = formCache.get('all_form_configs');
    if (cached) {
      return cached;
    }

    // Configura√ß√µes dos formul√°rios (pode vir de API)
    const configs = {
      'usuario': {
        title: 'Cadastro de Usu√°rio',
        fields: [
          { name: 'nome', type: 'text', required: true, label: 'Nome Completo' },
          { name: 'email', type: 'email', required: true, label: 'Email' },
          { name: 'cpf', type: 'cpf', required: true, label: 'CPF' },
          { name: 'telefone', type: 'tel', required: true, label: 'Telefone' },
          { name: 'data_nascimento', type: 'date', required: false, label: 'Data de Nascimento' }
        ],
        validation: {
          cpf: 'required|cpf',
          email: 'required|email',
          telefone: 'required|phone'
        }
      },
      'escola': {
        title: 'Cadastro de Escola',
        fields: [
          { name: 'nome', type: 'text', required: true, label: 'Nome da Escola' },
          { name: 'cnpj', type: 'cnpj', required: true, label: 'CNPJ' },
          { name: 'codigo_inep', type: 'text', required: true, label: 'C√≥digo INEP' },
          { name: 'tipo', type: 'select', required: true, label: 'Tipo de Escola',
            options: ['Municipal', 'Estadual', 'Federal', 'Particular'] },
          { name: 'endereco', type: 'text', required: true, label: 'Endere√ßo' },
          { name: 'cep', type: 'cep', required: true, label: 'CEP' }
        ],
        validation: {
          cnpj: 'required|cnpj',
          codigo_inep: 'required|numeric|length:8',
          cep: 'required|cep'
        }
      },
      'aluno': {
        title: 'Matr√≠cula de Aluno',
        fields: [
          { name: 'nome', type: 'text', required: true, label: 'Nome do Aluno' },
          { name: 'cpf', type: 'cpf', required: false, label: 'CPF do Aluno' },
          { name: 'data_nascimento', type: 'date', required: true, label: 'Data de Nascimento' },
          { name: 'serie', type: 'select', required: true, label: 'S√©rie',
            options: ['1¬∫ Ano EF', '2¬∫ Ano EF', '3¬∫ Ano EF', '4¬∫ Ano EF', '5¬∫ Ano EF',
                     '6¬∫ Ano EF', '7¬∫ Ano EF', '8¬∫ Ano EF', '9¬∫ Ano EF',
                     '1¬∫ Ano EM', '2¬∫ Ano EM', '3¬∫ Ano EM'] },
          { name: 'turno', type: 'select', required: true, label: 'Turno',
            options: ['Manh√£', 'Tarde', 'Noite', 'Integral'] },
          { name: 'nome_responsavel', type: 'text', required: true, label: 'Nome do Respons√°vel' },
          { name: 'telefone_responsavel', type: 'tel', required: true, label: 'Telefone do Respons√°vel' }
        ],
        validation: {
          cpf: 'cpf',
          telefone_responsavel: 'required|phone'
        }
      },
      'professor': {
        title: 'Cadastro de Professor',
        fields: [
          { name: 'nome', type: 'text', required: true, label: 'Nome Completo' },
          { name: 'cpf', type: 'cpf', required: true, label: 'CPF' },
          { name: 'email', type: 'email', required: true, label: 'Email' },
          { name: 'telefone', type: 'tel', required: true, label: 'Telefone' },
          { name: 'disciplinas', type: 'multiselect', required: true, label: 'Disciplinas',
            options: ['Matem√°tica', 'Portugu√™s', 'Hist√≥ria', 'Geografia', 'Ci√™ncias',
                     'F√≠sica', 'Qu√≠mica', 'Biologia', 'Ingl√™s', 'Educa√ß√£o F√≠sica',
                     'Arte', 'Filosofia', 'Sociologia'] },
          { name: 'formacao', type: 'textarea', required: true, label: 'Forma√ß√£o Acad√™mica' },
          { name: 'data_admissao', type: 'date', required: true, label: 'Data de Admiss√£o' }
        ],
        validation: {
          cpf: 'required|cpf',
          email: 'required|email',
          telefone: 'required|phone'
        }
      },
      'contato': {
        title: 'Formul√°rio de Contato',
        fields: [
          { name: 'nome', type: 'text', required: true, label: 'Nome' },
          { name: 'email', type: 'email', required: true, label: 'Email' },
          { name: 'telefone', type: 'tel', required: false, label: 'Telefone' },
          { name: 'assunto', type: 'select', required: true, label: 'Assunto',
            options: ['D√∫vida Geral', 'Suporte T√©cnico', 'Solicita√ß√£o de Recurso', 'Reclama√ß√£o', 'Sugest√£o'] },
          { name: 'mensagem', type: 'textarea', required: true, label: 'Mensagem' }
        ],
        validation: {
          email: 'required|email',
          telefone: 'phone'
        }
      }
    };

    // Cache por 1 hora
    formCache.set('all_form_configs', configs, 60 * 60 * 1000);

    return configs;
  }

  /**
   * Precarregar formul√°rios comuns
   */
  async preloadCommonForms(): Promise<void> {
    if (this.isPreloading) return;
    
    this.isPreloading = true;
    
    const commonForms = ['usuario', 'escola', 'aluno'];
    
    try {
      console.log('üöÄ Iniciando preload de formul√°rios comuns...');
      
      const preloadPromises = commonForms.map(formType => 
        this.loadForm(formType, { preload: true }).catch(error => {
          console.warn(`Falha no preload de ${formType}:`, error);
          return null;
        })
      );

      await Promise.all(preloadPromises);
      console.log('‚úÖ Preload de formul√°rios conclu√≠do');
    } finally {
      this.isPreloading = false;
    }
  }

  /**
   * Adicionar formul√°rio √† fila de preload
   */
  addToPreloadQueue(formType: string): void {
    if (!this.preloadQueue.includes(formType)) {
      this.preloadQueue.push(formType);
    }
  }

  /**
   * Processar fila de preload
   */
  async processPreloadQueue(): Promise<void> {
    if (this.isPreloading || this.preloadQueue.length === 0) return;

    this.isPreloading = true;

    try {
      while (this.preloadQueue.length > 0) {
        const formType = this.preloadQueue.shift()!;
        try {
          await this.loadForm(formType, { preload: true });
          console.log(`‚úÖ Preload conclu√≠do: ${formType}`);
        } catch (error) {
          console.warn(`‚ùå Falha no preload: ${formType}`, error);
        }
      }
    } finally {
      this.isPreloading = false;
    }
  }

  /**
   * Verificar se um formul√°rio est√° carregado
   */
  isLoaded(formType: string): boolean {
    return this.loadedModules.has(`lazy_form_${formType}`);
  }

  /**
   * Limpar m√≥dulos carregados
   */
  clearLoaded(): void {
    this.loadedModules.clear();
    this.loadingPromises.clear();
  }

  /**
   * Obter estat√≠sticas de carregamento
   */
  getStats(): {
    loadedCount: number;
    totalSize: number;
    averageLoadTime: number;
    cacheHitRate: number;
  } {
    const loaded = Array.from(this.loadedModules.values());
    const totalSize = loaded.reduce((sum, module) => sum + module.size, 0);
    
    return {
      loadedCount: loaded.length,
      totalSize,
      averageLoadTime: 0, // Pode ser implementado com m√©tricas
      cacheHitRate: 0 // Pode ser implementado com contadores
    };
  }

  /**
   * Utilit√°rio para delay
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// ===== HOOK REACT PARA LAZY LOADING =====
import React from 'react';

export function useLazyForm(formType: string) {
  const [config, setConfig] = React.useState<any>(null);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState<Error | null>(null);

  const loadForm = React.useCallback(async () => {
    if (loading) return;
    
    try {
      setLoading(true);
      setError(null);
      
      const formConfig = await lazyLoader.loadForm(formType);
      setConfig(formConfig);
    } catch (err) {
      setError(err as Error);
    } finally {
      setLoading(false);
    }
  }, [formType, loading]);

  React.useEffect(() => {
    // Verificar se j√° est√° carregado
    if (lazyLoader.isLoaded(formType)) {
      const cached = formCache.getFormConfig(formType);
      if (cached) {
        setConfig(cached);
        return;
      }
    }

    // Carregar se necess√°rio
    loadForm();
  }, [formType, loadForm]);

  return { config, loading, error, reload: loadForm };
}

// ===== INST√ÇNCIA GLOBAL =====
export const lazyLoader = new LazyLoader();

// ===== UTILIT√ÅRIOS DE COMPONENTE =====
interface LazyFormWrapperProps {
  formType: string;
  fallback?: React.ReactNode;
  children: (config: any) => React.ReactNode;
}

export const LazyFormWrapper: React.FC<LazyFormWrapperProps> = ({ formType, fallback, children }) => {
  const { config, loading, error } = useLazyForm(formType);

  if (loading) {
    return fallback || React.createElement('div', { className: 'flex items-center justify-center p-8' },
      React.createElement('div', { className: 'animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600' }),
      React.createElement('span', { className: 'ml-2 text-gray-600' }, 'Carregando formul√°rio...')
    );
  }

  if (error) {
    return React.createElement('div', { className: 'text-center p-8 text-red-600' },
      React.createElement('p', {}, `Erro ao carregar formul√°rio: ${error.message}`),
      React.createElement('button', {
        onClick: () => window.location.reload(),
        className: 'mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700'
      }, 'Tentar Novamente')
    );
  }

  if (!config) {
    return fallback || React.createElement('div', {}, 'Formul√°rio n√£o encontrado');
  }

  return React.createElement(React.Fragment, {}, children(config));
};

export default LazyLoader;