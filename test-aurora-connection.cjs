/**
 * TESTE DE CONECTIVIDADE COM AURORA DSQL
 * 
 * Verifica se podemos conectar com Aurora DSQL e testa diferentes formatos
 */

const { RDSDataClient, ExecuteStatementCommand } = require('@aws-sdk/client-rds-data');
require('dotenv').config();

async function testAuroraConnection() {
  console.log('üîç Testando conectividade com Aurora DSQL...');
  
  // Configura√ß√£o do cliente
  const client = new RDSDataClient({
    region: 'us-east-1',
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
    }
  });
  
  // Extrair cluster ID do endpoint
  const endpoint = process.env.ENDPOINT_AURORA;
  const clusterId = endpoint ? endpoint.split('.')[0] : null;
  
  console.log(`üìç Endpoint: ${endpoint}`);
  console.log(`üÜî Cluster ID: ${clusterId}`);
  
  if (!clusterId) {
    console.error('‚ùå N√£o foi poss√≠vel extrair cluster ID do endpoint');
    return;
  }
  
  // Testar diferentes formatos de ARN
  const arnFormats = [
    `arn:aws:dsql:us-east-1:762723916379:cluster/${clusterId}`,
    `arn:aws:rds:us-east-1:762723916379:cluster:${clusterId}`,
    `arn:aws:dsql:us-east-1:762723916379:cluster:${clusterId}`,
    endpoint, // Endpoint direto
    clusterId // Apenas cluster ID
  ];
  
  console.log('\nüß™ Testando diferentes formatos de ARN/Resource:');
  
  for (let i = 0; i < arnFormats.length; i++) {
    const resourceArn = arnFormats[i];
    console.log(`\n${i + 1}. Testando: ${resourceArn}`);
    
    try {
      const command = new ExecuteStatementCommand({
        resourceArn: resourceArn,
        sql: 'SELECT 1 as test'
      });
      
      const result = await client.send(command);
      console.log(`‚úÖ SUCESSO! Formato correto: ${resourceArn}`);
      console.log(`üìä Resposta:`, result);
      
      // Se chegou aqui, encontrou o formato correto
      console.log('\nüéâ FORMATO CORRETO ENCONTRADO!');
      console.log(`üîó ARN/Resource v√°lido: ${resourceArn}`);
      
      // Testar cria√ß√£o de tabela simples
      console.log('\nüß™ Testando cria√ß√£o de tabela simples...');
      try {
        const createCommand = new ExecuteStatementCommand({
          resourceArn: resourceArn,
          sql: 'CREATE TABLE IF NOT EXISTS test_table (id SERIAL PRIMARY KEY, name TEXT)'
        });
        
        const createResult = await client.send(createCommand);
        console.log('‚úÖ Tabela de teste criada com sucesso!');
        console.log(`üìä Resultado:`, createResult);
      } catch (createError) {
        console.log(`‚ùå Erro ao criar tabela: ${createError.message}`);
      }
      
      return resourceArn;
      
    } catch (error) {
      console.log(`‚ùå Erro: ${error.message}`);
    }
  }
  
  console.log('\nüí• Nenhum formato de ARN funcionou. Poss√≠veis problemas:');
  console.log('1. Aurora DSQL n√£o est√° configurado corretamente');
  console.log('2. Permiss√µes AWS insuficientes');
  console.log('3. Cluster n√£o existe ou n√£o est√° ativo');
  console.log('4. Regi√£o incorreta');
  
  // Verificar credenciais b√°sicas
  console.log('\nüîë Verificando credenciais AWS...');
  console.log(`AWS_ACCESS_KEY_ID: ${process.env.AWS_ACCESS_KEY_ID ? 'CONFIGURADO' : 'AUSENTE'}`);
  console.log(`AWS_SECRET_ACCESS_KEY: ${process.env.AWS_SECRET_ACCESS_KEY ? 'CONFIGURADO' : 'AUSENTE'}`);
  console.log(`TOKEN_AURORA: ${process.env.TOKEN_AURORA ? 'CONFIGURADO' : 'AUSENTE'}`);
  
  return null;
}

// Executar teste
testAuroraConnection()
  .then((validArn) => {
    if (validArn) {
      console.log(`\nüéØ ARN V√ÅLIDO ENCONTRADO: ${validArn}`);
      console.log('üí° Use este ARN para executar o script SQL');
    } else {
      console.log('\n‚ùå Nenhum ARN v√°lido encontrado');
      console.log('üîß Verifique a configura√ß√£o do Aurora DSQL na AWS');
    }
  })
  .catch((error) => {
    console.error('üí• Erro cr√≠tico:', error);
  });