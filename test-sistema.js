/**
 * TESTE COMPLETO DO SISTEMA IAPRENDER
 * 
 * Script para testar todas as funcionalidades principais do sistema
 * independente do Jest para diagn√≥stico completo
 */

import dotenv from 'dotenv';
import { Pool } from 'pg';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

// Carregar vari√°veis de ambiente
dotenv.config();

const DB_URL = process.env.DATABASE_URL;
const JWT_SECRET = process.env.JWT_SECRET || 'test_secret_key_iaprender_2025';

console.log('üß™ Iniciando teste completo do sistema IAprender...\n');

// Configurar pool de conex√£o
const pool = new Pool({
  connectionString: DB_URL,
  max: 5,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

/**
 * TESTE 1: Conex√£o com Banco de Dados
 */
async function testarConexaoBanco() {
  console.log('üìä TESTE 1: Conex√£o com Banco de Dados');
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT NOW() as timestamp, version() as version');
    console.log('  ‚úÖ Conex√£o estabelecida com sucesso');
    console.log(`  üìÖ Timestamp: ${result.rows[0].timestamp}`);
    console.log(`  üî¢ Vers√£o PostgreSQL: ${result.rows[0].version.split(' ')[0]}`);
    client.release();
    return true;
  } catch (error) {
    console.log('  ‚ùå Erro na conex√£o:', error.message);
    return false;
  }
}

/**
 * TESTE 2: Verifica√ß√£o de Tabelas Principais
 */
async function testarTabelasPrincipais() {
  console.log('\nüóÑÔ∏è TESTE 2: Verifica√ß√£o de Tabelas Principais');
  try {
    const tabelas = [
      'usuarios', 'empresas', 'contratos', 'escolas', 
      'gestores', 'diretores', 'professores', 'alunos'
    ];
    
    for (const tabela of tabelas) {
      const result = await pool.query(`
        SELECT count(*) as total 
        FROM information_schema.tables 
        WHERE table_name = $1
      `, [tabela]);
      
      const existe = result.rows[0].total > 0;
      console.log(`  ${existe ? '‚úÖ' : '‚ùå'} Tabela ${tabela}: ${existe ? 'existe' : 'n√£o encontrada'}`);
      
      if (existe) {
        const count = await pool.query(`SELECT count(*) as registros FROM ${tabela}`);
        console.log(`    üìä Registros: ${count.rows[0].registros}`);
      }
    }
    return true;
  } catch (error) {
    console.log('  ‚ùå Erro ao verificar tabelas:', error.message);
    return false;
  }
}

/**
 * TESTE 3: Sistema de Valida√ß√£o Brasileira
 */
async function testarValidacoes() {
  console.log('\nüáßüá∑ TESTE 3: Sistema de Valida√ß√£o Brasileira');
  
  try {
    // Importar validadores
    const { validarCPF, validarCNPJ, validarTelefone, validarEmail } = await import('./src/utils/validadores.js');
    
    // Testar CPF
    const cpfTeste = '12345678901';
    const cpfValido = validarCPF(cpfTeste);
    console.log(`  ${cpfValido.valido ? '‚úÖ' : '‚ùå'} CPF: ${cpfTeste} - ${cpfValido.valido ? 'v√°lido' : cpfValido.erro}`);
    
    // Testar CNPJ
    const cnpjTeste = '11222333000181';
    const cnpjValido = validarCNPJ(cnpjTeste);
    console.log(`  ${cnpjValido.valido ? '‚úÖ' : '‚ùå'} CNPJ: ${cnpjTeste} - ${cnpjValido.valido ? 'v√°lido' : cnpjValido.erro}`);
    
    // Testar telefone
    const telTeste = '11999887766';
    const telValido = validarTelefone(telTeste);
    console.log(`  ${telValido.valido ? '‚úÖ' : '‚ùå'} Telefone: ${telTeste} - ${telValido.valido ? 'v√°lido' : telValido.erro}`);
    
    // Testar email
    const emailTeste = 'teste@iaprender.com.br';
    const emailValido = validarEmail(emailTeste);
    console.log(`  ${emailValido.valido ? '‚úÖ' : '‚ùå'} Email: ${emailTeste} - ${emailValido.valido ? 'v√°lido' : emailValido.erro}`);
    
    return true;
  } catch (error) {
    console.log('  ‚ùå Erro ao testar valida√ß√µes:', error.message);
    return false;
  }
}

/**
 * TESTE 4: Sistema de Autentica√ß√£o JWT
 */
async function testarAutenticacao() {
  console.log('\nüîê TESTE 4: Sistema de Autentica√ß√£o JWT');
  
  try {
    // Criar um token de teste
    const payload = {
      id: 1,
      email: 'admin@iaprender.com.br',
      tipo_usuario: 'admin',
      empresa_id: 1
    };
    
    const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });
    console.log('  ‚úÖ Token JWT criado com sucesso');
    
    // Verificar token
    const decoded = jwt.verify(token, JWT_SECRET);
    console.log(`  ‚úÖ Token verificado: ${decoded.email} (${decoded.tipo_usuario})`);
    
    // Testar hash de senha
    const senha = 'senha123';
    const hash = await bcrypt.hash(senha, 10);
    const validSenha = await bcrypt.compare(senha, hash);
    console.log(`  ${validSenha ? '‚úÖ' : '‚ùå'} Hash de senha: ${validSenha ? 'v√°lido' : 'inv√°lido'}`);
    
    return true;
  } catch (error) {
    console.log('  ‚ùå Erro no sistema de autentica√ß√£o:', error.message);
    return false;
  }
}

/**
 * TESTE 5: Sistema de Hierarquia de Usu√°rios
 */
async function testarHierarquia() {
  console.log('\nüë• TESTE 5: Sistema de Hierarquia de Usu√°rios');
  
  try {
    // Verificar usu√°rios por tipo
    const tiposUsuario = ['admin', 'gestor', 'diretor', 'professor', 'aluno'];
    
    for (const tipo of tiposUsuario) {
      const result = await pool.query(`
        SELECT count(*) as total 
        FROM usuarios 
        WHERE tipo_usuario = $1
      `, [tipo]);
      
      console.log(`  üìä ${tipo.charAt(0).toUpperCase() + tipo.slice(1)}s: ${result.rows[0].total} usu√°rios`);
    }
    
    // Verificar hierarquia empresa-usu√°rio
    const hierarquia = await pool.query(`
      SELECT 
        e.nome as empresa,
        u.tipo_usuario,
        count(*) as total
      FROM usuarios u
      LEFT JOIN empresas e ON u.empresa_id = e.id
      GROUP BY e.nome, u.tipo_usuario
      ORDER BY e.nome, u.tipo_usuario
    `);
    
    console.log('  üè¢ Hierarquia por empresa:');
    for (const row of hierarquia.rows) {
      console.log(`    ${row.empresa || 'Sem empresa'} - ${row.tipo_usuario}: ${row.total}`);
    }
    
    return true;
  } catch (error) {
    console.log('  ‚ùå Erro ao testar hierarquia:', error.message);
    return false;
  }
}

/**
 * TESTE 6: Sistema de Controle de Acesso
 */
async function testarControleAcesso() {
  console.log('\nüõ°Ô∏è TESTE 6: Sistema de Controle de Acesso');
  
  try {
    // Testar busca de usu√°rios por empresa
    const empresas = await pool.query('SELECT id, nome FROM empresas LIMIT 3');
    
    for (const empresa of empresas.rows) {
      const usuarios = await pool.query(`
        SELECT tipo_usuario, count(*) as total
        FROM usuarios 
        WHERE empresa_id = $1
        GROUP BY tipo_usuario
      `, [empresa.id]);
      
      console.log(`  üè¢ ${empresa.nome}:`);
      for (const user of usuarios.rows) {
        console.log(`    ${user.tipo_usuario}: ${user.total} usu√°rios`);
      }
    }
    
    return true;
  } catch (error) {
    console.log('  ‚ùå Erro ao testar controle de acesso:', error.message);
    return false;
  }
}

/**
 * TESTE 7: Performance de Consultas
 */
async function testarPerformance() {
  console.log('\n‚ö° TESTE 7: Performance de Consultas');
  
  try {
    const queries = [
      {
        nome: 'Buscar usu√°rios',
        sql: 'SELECT count(*) FROM usuarios'
      },
      {
        nome: 'Buscar alunos com escola',
        sql: `SELECT count(*) FROM alunos a 
              LEFT JOIN escolas e ON a.escola_id = e.id 
              LEFT JOIN empresas emp ON a.empresa_id = emp.id`
      },
      {
        nome: 'Estat√≠sticas empresas',
        sql: `SELECT e.nome, count(u.id) as usuarios 
              FROM empresas e 
              LEFT JOIN usuarios u ON e.id = u.empresa_id 
              GROUP BY e.id, e.nome`
      }
    ];
    
    for (const query of queries) {
      const inicio = Date.now();
      const result = await pool.query(query.sql);
      const tempo = Date.now() - inicio;
      
      const status = tempo < 1000 ? '‚úÖ' : tempo < 5000 ? '‚ö†Ô∏è' : '‚ùå';
      console.log(`  ${status} ${query.nome}: ${tempo}ms (${result.rows.length} resultados)`);
    }
    
    return true;
  } catch (error) {
    console.log('  ‚ùå Erro ao testar performance:', error.message);
    return false;
  }
}

/**
 * FUN√á√ÉO PRINCIPAL
 */
async function executarTestes() {
  const resultados = [];
  
  try {
    resultados.push(await testarConexaoBanco());
    resultados.push(await testarTabelasPrincipais());
    resultados.push(await testarValidacoes());
    resultados.push(await testarAutenticacao());
    resultados.push(await testarHierarquia());
    resultados.push(await testarControleAcesso());
    resultados.push(await testarPerformance());
    
    const sucessos = resultados.filter(r => r).length;
    const total = resultados.length;
    
    console.log('\nüìä RESUMO DOS TESTES:');
    console.log(`‚úÖ Sucessos: ${sucessos}/${total}`);
    console.log(`‚ùå Falhas: ${total - sucessos}/${total}`);
    
    if (sucessos === total) {
      console.log('\nüéâ TODOS OS TESTES PASSARAM! Sistema funcionando corretamente.');
    } else {
      console.log('\n‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.');
    }
    
  } catch (error) {
    console.log('\nüí• Erro fatal durante execu√ß√£o dos testes:', error.message);
  } finally {
    await pool.end();
    console.log('\nüëã Testes finalizados.');
  }
}

// Executar testes
executarTestes();