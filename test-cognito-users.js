/**
 * Script para listar usu√°rios do AWS Cognito
 * Verifica se o usu√°rio existe e est√° ativo
 */

import AWS from 'aws-sdk';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

// Configurar AWS
AWS.config.update({
  region: process.env.AWS_REGION || 'us-east-1',
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
});

const cognito = new AWS.CognitoIdentityServiceProvider();

async function listCognitoUsers() {
  const userPoolId = process.env.AWS_COGNITO_USER_POOL_ID;
  
  console.log('üîç Listando usu√°rios do AWS Cognito...');
  console.log('User Pool ID:', userPoolId);
  console.log('Regi√£o:', process.env.AWS_REGION || 'us-east-1');
  
  try {
    // Listar todos os usu√°rios
    const users = await cognito.listUsers({
      UserPoolId: userPoolId,
      Limit: 60 // M√°ximo da API
    }).promise();
    
    console.log(`\n‚úÖ Encontrados ${users.Users.length} usu√°rios no Cognito:\n`);
    
    users.Users.forEach((user, index) => {
      console.log(`${index + 1}. üë§ ${user.Username}`);
      console.log(`   üìß Email: ${user.Attributes.find(attr => attr.Name === 'email')?.Value || 'N/A'}`);
      console.log(`   üìõ Nome: ${user.Attributes.find(attr => attr.Name === 'name')?.Value || 'N/A'}`);
      console.log(`   üîê Status: ${user.UserStatus}`);
      console.log(`   ‚úÖ Habilitado: ${user.Enabled}`);
      console.log(`   üìÖ Criado: ${user.UserCreateDate}`);
      console.log(`   üîÑ √öltima modifica√ß√£o: ${user.UserLastModifiedDate}`);
      
      // Verificar se tem grupos
      const groups = user.Attributes.find(attr => attr.Name === 'custom:groups')?.Value;
      if (groups) {
        console.log(`   üë• Grupos: ${groups}`);
      }
      
      console.log('');
    });
    
    return users.Users;
    
  } catch (error) {
    console.error('‚ùå Erro ao listar usu√°rios:', error);
    
    if (error.code === 'AccessDenied') {
      console.log('\nüí° Solu√ß√£o: Adicione a permiss√£o "cognito-idp:ListUsers" ao usu√°rio AWS');
    } else if (error.code === 'ResourceNotFoundException') {
      console.log('\nüí° Solu√ß√£o: Verifique se o User Pool ID est√° correto');
    }
    
    return [];
  }
}

async function checkSpecificUser(email) {
  const userPoolId = process.env.AWS_COGNITO_USER_POOL_ID;
  
  console.log(`üîç Verificando usu√°rio espec√≠fico: ${email}`);
  
  try {
    const user = await cognito.adminGetUser({
      UserPoolId: userPoolId,
      Username: email
    }).promise();
    
    console.log(`\n‚úÖ Usu√°rio encontrado: ${email}`);
    console.log(`   üîê Status: ${user.UserStatus}`);
    console.log(`   ‚úÖ Habilitado: ${user.Enabled}`);
    console.log(`   üìÖ Criado: ${user.UserCreateDate}`);
    console.log(`   üîÑ √öltima modifica√ß√£o: ${user.UserLastModifiedDate}`);
    
    // Mostrar atributos
    console.log('\nüìã Atributos:');
    user.UserAttributes.forEach(attr => {
      console.log(`   ${attr.Name}: ${attr.Value}`);
    });
    
    return user;
    
  } catch (error) {
    console.error(`‚ùå Erro ao verificar usu√°rio ${email}:`, error);
    
    if (error.code === 'UserNotFoundException') {
      console.log(`\nüí° Usu√°rio ${email} n√£o existe no Cognito`);
    } else if (error.code === 'AccessDenied') {
      console.log('\nüí° Solu√ß√£o: Adicione a permiss√£o "cognito-idp:AdminGetUser" ao usu√°rio AWS');
    }
    
    return null;
  }
}

async function listGroups() {
  const userPoolId = process.env.AWS_COGNITO_USER_POOL_ID;
  
  console.log('üîç Listando grupos do User Pool...');
  
  try {
    const groups = await cognito.listGroups({
      UserPoolId: userPoolId,
      Limit: 60
    }).promise();
    
    console.log(`\n‚úÖ Encontrados ${groups.Groups.length} grupos:\n`);
    
    groups.Groups.forEach((group, index) => {
      console.log(`${index + 1}. üë• ${group.GroupName}`);
      console.log(`   üìù Descri√ß√£o: ${group.Description || 'N/A'}`);
      console.log(`   üìä Preced√™ncia: ${group.Precedence || 'N/A'}`);
      console.log(`   üìÖ Criado: ${group.CreationDate}`);
      console.log('');
    });
    
    return groups.Groups;
    
  } catch (error) {
    console.error('‚ùå Erro ao listar grupos:', error);
    return [];
  }
}

// Executar testes
async function main() {
  console.log('üöÄ Iniciando verifica√ß√£o do AWS Cognito...\n');
  
  // Listar todos os usu√°rios
  const users = await listCognitoUsers();
  
  // Listar grupos
  await listGroups();
  
  // Verificar usu√°rio espec√≠fico (se existir)
  if (users.length > 0) {
    const firstUser = users[0];
    const email = firstUser.Attributes.find(attr => attr.Name === 'email')?.Value;
    
    if (email) {
      console.log('\n' + '='.repeat(50));
      await checkSpecificUser(email);
    }
  }
  
  console.log('\nüîç Para verificar um usu√°rio espec√≠fico, execute:');
  console.log('node test-cognito-users.js usuario@exemplo.com');
}

// Permitir verifica√ß√£o de usu√°rio espec√≠fico via argumentos
const specificUser = process.argv[2];
if (specificUser) {
  checkSpecificUser(specificUser);
} else {
  main();
}