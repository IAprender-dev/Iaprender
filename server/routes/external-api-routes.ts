/**
 * Rotas para integra√ß√£o com API externa
 * Endpoint: https://ghj67gg706.execute-api.us-east-1.amazonaws.com/prod
 */

import { Request, Response, Application } from 'express';

// Interface para estrutura de resposta
interface ExternalUser {
  id: string;
  nome?: string;
  email?: string;
  tipoUsuario?: 'admin' | 'gestor' | 'diretor' | 'professor' | 'aluno';
  status?: 'ativo' | 'inativo' | 'pendente' | 'suspenso';
  telefone?: string;
  endereco?: string;
  documento?: string;
  observacoes?: string;
  criadoEm?: string;
  atualizadoEm?: string;
}

interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
  timestamp: string;
}

// Configura√ß√£o da API externa
const API_BASE_URL = 'https://ghj67gg706.execute-api.us-east-1.amazonaws.com/prod';

/**
 * Fun√ß√£o utilit√°ria para obter token de autentica√ß√£o
 */
function getAuthTokenFromRequest(req: Request): string | null {
  const authHeader = req.header('Authorization');
  if (authHeader && authHeader.startsWith('Bearer ')) {
    return authHeader.substring(7);
  }
  return null;
}

/**
 * Fun√ß√£o utilit√°ria para fazer requisi√ß√µes autenticadas √† API externa
 */
async function makeExternalApiRequest(
  endpoint: string, 
  token: string,
  options: RequestInit = {}
): Promise<Response> {
  const headers = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}`,
    ...options.headers,
  };

  const response = await fetch(`${API_BASE_URL}${endpoint}`, {
    ...options,
    headers,
  });

  return response;
}

/**
 * Implementa√ß√£o da fun√ß√£o listarUsuarios fornecida pelo usu√°rio
 */
async function listarUsuarios(token: string): Promise<ExternalUser[]> {
  try {
    console.log('üìã Executando fun√ß√£o listarUsuarios com token:', token ? 'Presente' : 'Ausente');
    
    const response = await makeExternalApiRequest('/usuarios', token);
    
    if (!response.ok) {
      throw new Error(`Erro HTTP: ${response.status} - ${response.statusText}`);
    }

    const data = await response.json();
    
    // Verificar diferentes formatos de resposta poss√≠veis
    if (data.success && Array.isArray(data.data)) {
      console.log('‚úÖ Formato de resposta: { success: true, data: [...] }');
      return data.data;
    } else if (Array.isArray(data)) {
      console.log('‚úÖ Formato de resposta: Array direto');
      return data;
    } else if (data.usuarios && Array.isArray(data.usuarios)) {
      console.log('‚úÖ Formato de resposta: { usuarios: [...] }');
      return data.usuarios;
    } else {
      console.warn('‚ö†Ô∏è Formato de resposta inesperado:', data);
      return [];
    }
  } catch (error) {
    console.error('‚ùå Erro na fun√ß√£o listarUsuarios:', error);
    throw error;
  }
}

export function registerExternalApiRoutes(app: Application) {
  console.log('üìù Registrando rotas da API externa...');

  /**
   * GET /api/external/usuarios - Listar todos os usu√°rios da API externa
   */
  app.get('/api/external/usuarios', async (req: Request, res: Response) => {
    try {
      console.log('üìã GET /api/external/usuarios - Iniciando listagem');
      
      // Obter token de autentica√ß√£o
      const token = getAuthTokenFromRequest(req);
      if (!token) {
        return res.status(401).json({
          success: false,
          error: 'Token de autentica√ß√£o obrigat√≥rio',
          message: 'Forne√ßa um token Bearer v√°lido',
          timestamp: new Date().toISOString()
        } as ApiResponse<null>);
      }

      // Executar fun√ß√£o listarUsuarios
      const usuarios = await listarUsuarios(token);
      
      console.log(`‚úÖ Listagem conclu√≠da: ${usuarios.length} usu√°rios encontrados`);
      
      res.json({
        success: true,
        data: usuarios,
        message: `${usuarios.length} usu√°rios carregados da API externa`,
        timestamp: new Date().toISOString(),
        metadata: {
          total: usuarios.length,
          source: 'external-api',
          endpoint: '/usuarios',
          user_agent: req.get('User-Agent') || 'unknown'
        }
      } as ApiResponse<ExternalUser[]>);

    } catch (error) {
      console.error('‚ùå Erro ao listar usu√°rios da API externa:', error);
      
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
      
      res.status(500).json({
        success: false,
        error: errorMessage,
        message: 'Falha ao conectar com a API externa',
        timestamp: new Date().toISOString()
      } as ApiResponse<null>);
    }
  });

  /**
   * GET /api/external/usuarios/:id - Buscar usu√°rio espec√≠fico
   */
  app.get('/api/external/usuarios/:id', async (req: Request, res: Response) => {
    try {
      const { id } = req.params;
      console.log(`üë§ GET /api/external/usuarios/${id} - Buscando usu√°rio espec√≠fico`);
      
      const token = getAuthTokenFromRequest(req);
      if (!token) {
        return res.status(401).json({
          success: false,
          error: 'Token de autentica√ß√£o obrigat√≥rio',
          timestamp: new Date().toISOString()
        } as ApiResponse<null>);
      }

      const response = await makeExternalApiRequest(`/usuarios/${id}`, token);
      
      if (!response.ok) {
        return res.status(response.status).json({
          success: false,
          error: `Usu√°rio n√£o encontrado: ${response.status}`,
          timestamp: new Date().toISOString()
        } as ApiResponse<null>);
      }

      const data = await response.json();
      
      res.json({
        success: true,
        data: data.success ? data.data : data,
        message: 'Usu√°rio encontrado',
        timestamp: new Date().toISOString()
      } as ApiResponse<ExternalUser>);

    } catch (error) {
      console.error('‚ùå Erro ao buscar usu√°rio:', error);
      
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        timestamp: new Date().toISOString()
      } as ApiResponse<null>);
    }
  });

  /**
   * POST /api/external/usuarios - Criar novo usu√°rio
   */
  app.post('/api/external/usuarios', async (req: Request, res: Response) => {
    try {
      console.log('‚ûï POST /api/external/usuarios - Criando usu√°rio');
      
      const token = getAuthTokenFromRequest(req);
      if (!token) {
        return res.status(401).json({
          success: false,
          error: 'Token de autentica√ß√£o obrigat√≥rio',
          timestamp: new Date().toISOString()
        } as ApiResponse<null>);
      }

      const response = await makeExternalApiRequest('/usuarios', token, {
        method: 'POST',
        body: JSON.stringify(req.body),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        return res.status(response.status).json({
          success: false,
          error: errorData.error || `Erro ao criar usu√°rio: ${response.status}`,
          timestamp: new Date().toISOString()
        } as ApiResponse<null>);
      }

      const data = await response.json();
      
      res.status(201).json({
        success: true,
        data: data.success ? data.data : data,
        message: 'Usu√°rio criado com sucesso',
        timestamp: new Date().toISOString()
      } as ApiResponse<ExternalUser>);

    } catch (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', error);
      
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        timestamp: new Date().toISOString()
      } as ApiResponse<null>);
    }
  });

  /**
   * GET /api/external/health - Verificar status da API externa
   */
  app.get('/api/external/health', async (req: Request, res: Response) => {
    try {
      console.log('üîç GET /api/external/health - Verificando conectividade');
      
      const response = await fetch(`${API_BASE_URL}/health`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const isOnline = response.ok;
      
      res.json({
        success: true,
        data: {
          status: isOnline ? 'online' : 'offline',
          statusCode: response.status,
          endpoint: API_BASE_URL,
          timestamp: new Date().toISOString()
        },
        message: isOnline ? 'API externa est√° online' : 'API externa est√° offline',
        timestamp: new Date().toISOString()
      } as ApiResponse<any>);

    } catch (error) {
      console.error('‚ùå Erro ao verificar conectividade:', error);
      
      res.json({
        success: false,
        data: {
          status: 'error',
          endpoint: API_BASE_URL,
          timestamp: new Date().toISOString()
        },
        error: error instanceof Error ? error.message : 'Erro de conectividade',
        timestamp: new Date().toISOString()
      } as ApiResponse<any>);
    }
  });

  /**
   * GET /api/external/stats - Estat√≠sticas da API externa
   */
  app.get('/api/external/stats', async (req: Request, res: Response) => {
    try {
      console.log('üìä GET /api/external/stats - Obtendo estat√≠sticas');
      
      const token = getAuthTokenFromRequest(req);
      if (!token) {
        return res.status(401).json({
          success: false,
          error: 'Token de autentica√ß√£o obrigat√≥rio',
          timestamp: new Date().toISOString()
        } as ApiResponse<null>);
      }

      // Tentar obter estat√≠sticas
      try {
        const response = await makeExternalApiRequest('/stats', token);
        
        if (response.ok) {
          const data = await response.json();
          return res.json({
            success: true,
            data: data.success ? data.data : data,
            message: 'Estat√≠sticas obtidas com sucesso',
            timestamp: new Date().toISOString()
          } as ApiResponse<any>);
        }
      } catch (statsError) {
        console.warn('‚ö†Ô∏è Endpoint /stats n√£o dispon√≠vel, gerando estat√≠sticas baseadas em usu√°rios');
      }

      // Fallback: gerar estat√≠sticas baseadas na listagem de usu√°rios
      const usuarios = await listarUsuarios(token);
      
      const stats = {
        totalUsuarios: usuarios.length,
        usuariosAtivos: usuarios.filter(u => u.status === 'ativo').length,
        usuariosInativos: usuarios.filter(u => u.status === 'inativo').length,
        usuariosPendentes: usuarios.filter(u => u.status === 'pendente').length,
        distribuicaoTipos: {
          admin: usuarios.filter(u => u.tipoUsuario === 'admin').length,
          gestor: usuarios.filter(u => u.tipoUsuario === 'gestor').length,
          diretor: usuarios.filter(u => u.tipoUsuario === 'diretor').length,
          professor: usuarios.filter(u => u.tipoUsuario === 'professor').length,
          aluno: usuarios.filter(u => u.tipoUsuario === 'aluno').length,
        },
        ultimaAtualizacao: new Date().toISOString()
      };
      
      res.json({
        success: true,
        data: stats,
        message: 'Estat√≠sticas calculadas baseadas na listagem de usu√°rios',
        timestamp: new Date().toISOString()
      } as ApiResponse<any>);

    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        timestamp: new Date().toISOString()
      } as ApiResponse<null>);
    }
  });

  console.log('‚úÖ Rotas da API externa registradas com sucesso');
}